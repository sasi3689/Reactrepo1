var React=require("react");
var ReactDom=require("react-dom");

var CommentBox=React.createClass({
  render:function(){
    return(
      <div>
      <h2>I am a CommentBox</h2>
      </div>
          )
  }
})
ReactDom.render(<CommentBox/>,document.getElementById("app"));



var React=require('react');
var ReactDOM=require('react-dom');
var Child=require('./component/Child.js');
var Child2=require("./component/Child2.js");

var MainComponent = React.createClass({
  render:function(){
    return (
      <div>
       <h2>Hello from React</h2>
       <Child data='hello'/>
       <Child2 />
      
      </div>
        )
  }
})
ReactDOM.render(<MainComponent/>,document.getElementById('app'));
//ReactDOM.render(<Child/>,document.getElementById('app2'));



var CommentList = React.createClass({
  render: function() {
    return (
      <div className="commentList">
        Hello, world! I am a CommentList.
      </div>
    );
  }
});
var CommentForm = React.createClass({
  render: function() {
    return (
      <div className="commentForm">
        Hello, world! I am a CommentForm.
      </div>
    );
  }
});

// tutorial4.js
var Comment = React.createClass({
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        {this.props.children}
      </div>
    );
  }
});








<Comment author="Pete Hunt">This is one comment</Comment>
<Comment author="Jordan Walke">This is *another* comment</Comment>


var Comment = React.createClass({
  render: function() {
    var md = new Remarkable();
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        {md.render(this.props.children.toString())}
      </div>
    );
  }
});

// tutorial12.js
var CommentBox = React.createClass({
  getInitialState: function() {
    return {data: []};
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm />
      </div>
    );
  }
});


var data = [
  {id: 1, author: "Pete Hunt", text: "This is one comment"},
  {id: 2, author: "Jordan Walke", text: "This is *another* comment"}
];


var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.props.data} />
        <CommentForm />
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox data={data} />,
  document.getElementById('content')
);



var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" />,
  document.getElementById('content')
);





var CommentBox = React.createClass({
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm />
      </div>
    );
  }
});




var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm />
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);
 










componentDidMount(){
        this.getDataFromServer('http://fcctop100.herokuapp.com/api/fccusers/top/recent');
    },
    //showResult Method
        showResult: function(response) {

            this.setState({
                data: response
            });
    },
    //making ajax call to get data from server
    getDataFromServer:function(URL){
        $.ajax({
            type:"GET",
            dataType:"json",
            url:URL,
            success: function(response) {
                this.showResult(response);
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    render:function(){
        return(
            <div>
                <Result result={this.state.data}/>
            </div>
        );
    }

<!-- DOCTYPE HTML -->
<html>
<head>
<title>iTunes API</title>
</head>
<body>
<div id="content"></div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>   
<script src="https://fb.me/react-0.14.6.js"></script>
<script src="https://fb.me/react-dom-0.14.6.js"></script>
<script src="http://fb.me/JSXTransformer-0.12.1.js"></script>
<script type="text/jsx">

var App = React.createClass({
    
    getInitialState: function() {
        return {
            searchResults: []
        }
    },

    showResults: function(response){
        this.setState({
            searchResults: response.results
        })
    },
    
    search: function(URL){
        $.ajax({
            type: "GET",
            dataType: 'jsonp',
            url: URL,
            success: function(response){
                this.showResults(response);
            }.bind(this)
        });
    },

    render: function(){
        return (
            <div>
                <SearchBox search={this.search} />
                <Results searchResults={this.state.searchResults} />
            </div>
        );
    },


});

var SearchBox = React.createClass({
    
    render: function(){
        return (
            <div>
                <input type="text" ref="query" />
                <select ref="category">
                    <option value="software">Apps</option>
                    <option value="movie">Films</option>
                </select>
                <input type="submit" onClick={this.createAjax} />
            </div>
        );
    },

    createAjax: function(){
        var query    = ReactDOM.findDOMNode(this.refs.query).value;
        var category = ReactDOM.findDOMNode(this.refs.category).value;
        var URL      = 'https://itunes.apple.com/search?term=' + query +'&country=us&entity=' + category;
        this.props.search(URL)
    }

});

var Results = React.createClass({
    
    render: function(){
        var resultItems = this.props.searchResults.map(function(result) {
            return <ResultItem key={result.trackId} trackName={result.trackName} />
        });
        return(
            <ul>
                {resultItems}
            </ul>           
        );
    }
});

var ResultItem = React.createClass({
    
    render: function(){
        return <li>{this.props.trackName}</li>;
    }
});

ReactDOM.render(<App />,  document.getElementById("content"));

</script>
view rawindex.html hosted with ? by GitHub


handleClick:function(data){
    //e.preventDefault();
    var data=data;
    console.log("url:"+data);
    this.setState({searchdata:data});
    var u=this.state.searchdata;
    componentDidMount(u);





  },















https://medium.com/learning-new-stuff/building-your-second-react-js-app-eb66924b3774#.p9g272fji
search..................................
var React=require("react");
var ReactDOM=require("react-dom");


var Search=React.createClass({

  createAjax: function(){
        var query    = ReactDOM.findDOMNode(this.refs.query).value;
        var URL      = 'http://omdbapi.com/?s=' + query;
        this.props.s1data(URL)
    },

  render:function(){
    return(
      <div>
      <input
          type="text"
          placeholder="search for movie"
          ref="query"

          />

			<button type="submit" className="btn btn-default" onClick={this.createAjax} >submit</button>


         </div>
        )
  }
})
module.exports=Search;












main.......
var React=require("react");
var ReactDom=require("react-dom");
var Search=require("./component/Search.js");
var Content=require("./component/Content.js");


var MainComponent=React.createClass({

  getInitialState: function(){

    return ({searchdata:' ',data:[]})
  },


  //showResult Method
  showResult: function(response) {

    this.setState({
      data: response.Search
    });
  },
  //making ajax call to get data from server
  getDataFromServer:function(URL){
    $.ajax({
      type:"GET",
      dataType:"json",
      url:URL,
      success: function(response) {
        this.showResult(response);
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },



  render:function(){
    return(
      <div>

      <div className="container" id="main">
      <div className="navbar navbar-fixed-top">
      <a className="navbar-brand" href="/" id="image">MovieBox</a>
      <div className="nav-collapse collapse navbar-responsive-collapse">
      <ul className="nav navbar-nav">
      <li className="active">
      <a href="#">Home</a>
      </li>
      <li className="dropdown">
      <a href="#">MovieBox For Mac </a>

      </li>
      <li>
      <a href="#" >MovieBox For Android</a>
      </li>
      <li>
      <a href="#" className="dropdown-toggle"data-toggle="dropdown">More</a>
      <ul className="dropdown-menu">
      <li>
      <a href="#">about</a>
      </li>
      <li>
      <a href="#">news</a>
      </li>
      <li>
      <a href="#">Android</a>
      </li>
      <li>
      <a href="#">contacts</a>
      </li>
      </ul>
      </li>
      </ul>
      </div>
      </div>
      </div>
      <div className="reactdiv">
      <div className="jumbotron">
      <div className="container">
      <Search s1data={this.getDataFromServer} />
      </div>
      </div>
      <div className='container'>
      <Content data={this.state.data}/>
      </div>
      </div>
      </div>
    )
  }
})
ReactDom.render(<MainComponent />,document.getElementById("app"));

























var React=require("react");


var Search=React.createClass({
  getInitialState: function(){

    return ({moviename:''})
  },
  handlemovieChange: function(e){
    e.preventDefault();
  
    this.setState({moviename: e.target.value});

  },
  handleClick1:function(e){
    e.preventDefault();
    var m=this.state.moviename;
    var u='http://omdbapi.com/?s='+m;
    console.log(u);
    this.props.h(u);
  },

  render:function(){
    return(
      <div>
      <input
          type="text"
          placeholder="search for movie"
          value={this.state.moviename}
          onChange={this.handlemovieChange}/>

			<button type="submit" className="btn btn-default" onClick={this.handleClick1}>submit</button>


         </div>
        )
  }
})
module.exports=Search;


